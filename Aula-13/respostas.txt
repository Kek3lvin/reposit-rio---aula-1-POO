# 1 - Um paciente
from datetime import datetime

class Paciente:
    def __init__(self, n, c, t, ns):
        self.__n = n
        self.__c = c
        self.__t = t
        self.__ns =  datetime.strptime(ns, '%d/%m/%Y')

    def get_n(self): return self.__n
    def get_c(self): return self.__c
    def get_t(self): return self.__t
    def get_ns(self): return self.__ns
    def idade(self):
        atual = datetime.today()
        dias_v = atual - self.__ns
        print(dias_v.days // 365, 'anos', end = ' e ')
        print(dias_v.days % 365 // 30, 'meses')
    
    def __str__(self):
         return f"Nome: {self.__n} - CPF: {self.__c} - Telefone: {self.__t} - Data de nascimento: {self.__ns} "
    
class PacienteUI:
    __cadastrados = []
    @classmethod
    def menu(cls):
        op = int(input('Escolha uma opção: 1-Cadastrar paciente, 2-Listar, 3-Idade, 4-Atualizar, 5-sair: '))
        return op
    @classmethod
    def main(cls):
        op = 0
        while op != 5:
            op = PacienteUI.menu()
            if op == 1: PacienteUI.cadastrar()
            if op == 2: PacienteUI.listar()
            if op == 3: PacienteUI.idade()
            if op == 4: PacienteUI.atualizar()
    @classmethod
    def cadastrar(cls):
        nome = input('Informe o nome do paciente: ')
        cpf = (input('Informe o CPF do paciente:  '))
        fone = (input('Informe o telefone do paciente:  '))
        dn = (input('Informe a data de nascimento do paciente:  '))
        dados = Paciente(nome, cpf, fone, dn)
        cls.__cadastrados.append(dados)
    @classmethod
    def listar(cls):
        for p in cls.__cadastrados:
            print(p)
        if len(cls.__cadastrados) == 0:
            print('Nenhum paciente foi cadastrado ainda.')
    @classmethod
    def idade(cls):
        cpf = input("Informe o CPF do paciente: ")
        for p in cls.__cadastrados:
            if p.get_c() == cpf:
                print(f"A idade de {p.get_n()} é: ")  
                (p.idade())
            else:
                print("Paciente não encontrado.")
    @classmethod
    def atualizar(cls):
        cpf = input('Informe o CPF do paciente para editar os dados: ')
        for c in cls.__cadastrados:
            if c.get_c() == cpf:
                 n_nome = input('Informe o novo nome do paciente: ')
                 n_cpf = (input('Informe o novo CPF do paciente:  '))
                 n_fone = (input('Informe o novo telefone do paciente:  '))
                 n_dn = (input('Informe a nova data de nascimento do paciente:  '))
                 n_dados = Paciente(n_nome, n_cpf, n_fone, n_dn)
                 cls.__cadastrados.remove(c)
                 cls.__cadastrados.append(n_dados)
                 print('Dados atualizados')

PacienteUI.main()

# 2 - BOLETO

from datetime import datetime
from enum import Enum

class Pagamento(Enum):
    aberto = 1
    parcial = 2
    pago = 3

class Boleto:
    def __init__(self, codbarras, emissao, vencimento, valor_boleto):
        self.__codbarras = codbarras
        self.__dataEmissao = datetime.strptime(emissao, '%d/%m/%Y')
        self.__dataVencimento = datetime.strptime(vencimento, '%d/%m/%Y')
        self.__dataPagamento = None
        self.__valorBoleto = valor_boleto
        self.__valorPago = 0.0
        self.__situacao = Pagamento.aberto

    def get_codigo(self): return self.__codbarras
    def get_valor_pago(self): return self.__valorPago
    def get_valor_boleto(self): return self.__valorBoleto
    def get_situacao(self): return self.__situacao.name

    def pagar(self, valor):
        if valor > 0:
            self.__valorPago += valor
            self.__dataPagamento = datetime.now()
            if self.__valorPago == 0:
                self.__situacao = Pagamento.aberto
            elif self.__valorPago < self.__valorBoleto:
                self.__situacao = Pagamento.parcial
            else:
                self.__situacao = Pagamento.pago

    def __str__(self):
        return (f"Código: {self.__codbarras} | Emissão: {self.__dataEmissao.strftime('%d/%m/%Y')} | "
                f"Vencimento: {self.__dataVencimento.strftime('%d/%m/%Y')} | Valor: R$ {self.__valorBoleto:.2f} | "
                f"Pago: R$ {self.__valorPago:.2f} | Situação: {self.__situacao.name} | "
                f"Data de Pagamento: {self.__dataPagamento.strftime('%d/%m/%Y %H:%M:%S') if self.__dataPagamento else 'Ainda não pago'}")

class BoletoUI:
    __lista = []

    @classmethod
    def menu(cls):
        op = int(input("Escolha uma opção: 1-Cadastrar Boleto, 2-Listar boleto, 3-Pagar boleto, 4-Ver situação, 5-Sair: "))
        return op
    @classmethod
    def main(cls):
        op = 0
        while op != 5:
            op = cls.menu()
            if op == 1: BoletoUI.cadastrar()
            elif op == 2: BoletoUI.listar()
            elif op == 3: BoletoUI.pagar()
            elif op == 4: BoletoUI.situacao()
            elif op == 5: print("Encerrando o progama de pagamento.")
            else: print("Opção inválida.")
    @classmethod
    def cadastrar(cls):
        cod = input("Informe o código de barras: ")
        emissao = input("Informe a data de emissão (dd/mm/aaaa): ")
        venc = input("Informe a data de vencimento (dd/mm/aaaa): ")
        valor = float(input("Informe o valor do boleto: R$ "))
        b = Boleto(cod, emissao, venc, valor)
        cls.__lista.append(b)
        print("Boleto cadastrado com sucesso!")
    @classmethod
    def listar(cls):
        if not cls.__lista:
            print("Nenhum boleto cadastrado.")
        else:
            for b in cls.__lista:
                print(b)
    @classmethod
    def pagar(cls):
        cod = input("Informe o código de barras do boleto: ")
        for b in cls.__lista:
            if b.get_codigo() == cod:
                valor = float(input("Informe o valor a pagar: R$ "))
                b.pagar(valor)
                print("Pagamento registrado.")
                return
        print("Boleto não encontrado.")

    @classmethod
    def situacao(cls):
        cod = input("Informe o código de barras do boleto: ")
        for b in cls.__lista:
            if b.get_codigo() == cod:
                print(f"Situação do boleto: {b.get_situacao()}")
                return
        print("Boleto não encontrado.")

BoletoUI.main()

# 3 - AGENDA DE CONTATOS
from datetime import datetime

class Contatos:
    def __init__(self, id, n, e, t, ns):
        self.__id = id
        self.__nome = n
        self.__email = e
        self.__telefone =  t
        self.__nascimento = datetime.strptime(ns.strip(), '%d/%m/%Y')
    
    def get_id(self): return self.__id
    def get_nome(self): return self.__nome
    def get_email(self): return self.__email
    def get_fone(self): return self.__telefone
    def get_nas(self): return self.__nascimento

    def __str__(self):
       return  f'id: {self.__id}, Nome: {self.__nome}, Email: {self.__email}, Telefone: {self.__telefone}, Data de nascimento: {self.__nascimento}'
    
class ContatoUI:
    __contatos = []
    @classmethod    
    def main(cls):
        op = 0
        while op != 7:
            op = ContatoUI.menu()
            if op == 1: ContatoUI.inserir()
            if op == 2: ContatoUI.listar()
            if op == 3: ContatoUI.atualizar()
            if op == 4: ContatoUI.excluir()
            if op == 5: ContatoUI.pesquisar()
            if op == 6: ContatoUI.aniversariantes()
            if op == 7: print('Saindo')
            
    @classmethod    
    def menu(cls):
        print("1-Inserir, 2-Listar, 3-Atualizar, 4-Excluir, 5-Pesquisar, 6-Ver os aniversariantes do mês, 7-Sair")
        return int(input("Escolha uma opção: "))
    
    @classmethod    
    def inserir(cls):
        id = int(input("Informe o id do contato: "))
        nome = input("Informe o nome: ")
        email = input("Informe o e-mail: ")
        fone = input("Informe o fone: ")
        nascimento = input('Informe a data de nascimento desse contato: ')
        c = Contatos(id, nome, email, fone, nascimento)
        cls.__contatos.append(c)
    @classmethod    
    def listar(cls):
        if len(cls.__contatos) == 0: print('Nenhum contato cadastrado')
        for c in cls.__contatos:
            print(c)
    @classmethod

    def atualizar(cls):
       id = int(input("Informe o id do contato que você quer atualizar:"))
       for i in cls.__contatos:
          if i.get_id() == id:
            nome = input("Informe o novo nome: ")
            email = input("Informe o novo email: ")
            fone = input("Informe o novo fone: ")
            nascimento = input('Informe a nova data de nascimento:')
            y = Contatos(id, nome, email, fone, nascimento)
            cls.__contatos.remove(i)
            cls.__contatos.append(y)
            print('Dados atualizados!')
          else:
            print('Id inexistente.')

    @classmethod    
    def excluir(cls):
        nome = input('Informe o nome do contato que deseja excluir: ')
        for n in cls.__contatos:
            if n.get_nome() == nome:
                cls.__contatos.remove(n)
                print('Contato removido!')

    @classmethod    
    def pesquisar(cls):
        nome = input("Informe a inicial do nome que deseja pesquisar: ")
        for c in cls.__contatos:
            if c.get_nome().startswith(nome): print(c)
    
    @classmethod
    def aniversariantes(cls):
     mes = int(input("Informe o número do mês (1-12): ").strip())
     encontrados = False
     for c in cls.__contatos:
        if c.get_nas().month == mes:
            if not encontrados:
                print(f"O(s) aniversariante(s) do mês {mes} é(são):")
            print(c.get_nome())
            encontrados = True
     if not encontrados:
        print("Nenhum aniversariante encontrado nesse mês.")

ContatoUI.main()
